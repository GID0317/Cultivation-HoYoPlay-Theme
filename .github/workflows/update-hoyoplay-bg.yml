name: Update HoYoPlay Backgrounds

on:
  schedule:
    - cron: '0 3 * * *'    # daily at 03:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  update-backgrounds:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create scripts folder
        run: mkdir -p .github/scripts

      - name: Write updater script
        run: |
          cat > .github/scripts/update-hoyoplay-bg.js <<'EOF'
          const fs = require('fs');
          const path = require('path');

          (async () => {
            try {
              const API = 'https://sg-hyp-api.hoyoverse.com/hyp/hyp-connect/api/getAllGameBasicInfo?launcher_id=VYTpXlbWo8&language=en-us&game_id=gopR6Cufr3';
              const outDir = path.join(process.cwd(), 'Background');
              if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

              console.log('Fetching API...');
              const res = await fetch(API, { headers: { 'User-Agent': 'github-action' } });
              if (!res.ok) throw new Error('API fetch failed ' + res.status);
              const j = await res.json();
              const list = j?.data?.game_info_list || [];
              if (!list.length) throw new Error('no game_info_list');
              const backgrounds = list[0].backgrounds || [];
              const urls = backgrounds.map(b => (b && b.background && b.background.url) || b?.url).filter(Boolean);

              const first = urls[0];
              const second = urls[1] || urls[0];
              const third  = urls[2] || urls[1] || urls[0];

              if (!first) throw new Error('no background urls found');

              // Also extract video/theme/icon from the primary background entry (if present)
              const primary = backgrounds[0] || {};
              const videoUrl = (primary.video && primary.video.url) || '';
              const themeOverlayUrl = (primary.theme && primary.theme.url) || '';
              const iconUrl = (primary.icon && primary.icon.url) || '';
              const iconHoverUrl = (primary.icon && primary.icon.hover_url) || '';

              async function downloadTo(url, outPath) {
                console.log('Downloading', url);
                const r = await fetch(url, { headers: { 'User-Agent': 'github-action' } });
                if (!r.ok) throw new Error('download failed ' + r.status);
                const buf = Buffer.from(await r.arrayBuffer());
                fs.writeFileSync(outPath, buf);
                console.log('Saved', outPath);
              }

              await downloadTo(first, path.join(outDir, 'image1.webp'));
              await downloadTo(second, path.join(outDir, 'image2.webp'));
              await downloadTo(third,  path.join(outDir, 'image3.webp'));

              // Download video and overlay/icon assets if available
              if (videoUrl) {
                try { await downloadTo(videoUrl, path.join(outDir, 'video1.webm')); } catch(e) { console.warn('video download failed', e.message); }
              }
              if (themeOverlayUrl) {
                try { await downloadTo(themeOverlayUrl, path.join(outDir, 'overlay1.webp')); } catch(e) { console.warn('overlay download failed', e.message); }
              }
              if (iconUrl) {
                try { await downloadTo(iconUrl, path.join(outDir, 'icon.png')); } catch(e) { console.warn('icon download failed', e.message); }
              }
              if (iconHoverUrl) {
                try { await downloadTo(iconHoverUrl, path.join(outDir, 'icon-hover.png')); } catch(e) { console.warn('icon-hover download failed', e.message); }
              }

              // commit & push changes
              const execSync = require('child_process').execSync;
              execSync('git config user.name "github-actions[bot]"');
              execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
              // Stage all potential outputs; some may not exist if API didn't provide them
              execSync('git add ' + path.join('Background','image1.webp') + ' ' + path.join('Background','image2.webp') + ' ' + path.join('Background','image3.webp') + ' ' + path.join('Background','video1.webm') + ' ' + path.join('Background','overlay1.webp') + ' ' + path.join('Background','icon.png') + ' ' + path.join('Background','icon-hover.png'));
              try { execSync('git commit -m "Auto-update HoYoPlay backgrounds + media (1/2/3 + video1/overlay1/icon)"'); } catch(e) { console.log('No changes to commit'); }
              execSync('git push');
              console.log('Done');
            } catch (e) {
              console.error(e);
              process.exit(1);
            }
          })();
          EOF

      - name: Run updater
        env:
          NODE_OPTIONS: --unhandled-rejections=strict
        run: node .github/scripts/update-hoyoplay-bg.js
